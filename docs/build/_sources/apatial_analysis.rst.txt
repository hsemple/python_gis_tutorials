Spatial Analysis
====================


The script below calculates spatial interpolation using the IDW method.  It is taken from this website - https://www.geodose.com/2019/09/3d-terrain-modelling-in-python.html#google_vignette




.. code-block:: python

	import numpy as np

	# DISTANCE FUNCTION
	def distance(x1, y1, x2, y2):
	    d = np.sqrt((x1 - x2)**2 + (y1 - y2)**2)
	    return d

	# CREATING IDW FUNCTION
	def idw_npoint(xz, yz, n_point, p):
	    r = 10  # block radius iteration distance
	    nf = 0
	    while nf <= n_point:  # will stop when np reaching at least n_point
	        x_block = []
	        y_block = []
	        z_block = []
	        r += 10  # add 10 units each iteration
	        xr_min = xz - r
	        xr_max = xz + r
	        yr_min = yz - r
	        yr_max = yz + r
	        for i in range(len(x)):
	            # condition to test if a point is within the block
	            if ((x[i] >= xr_min and x[i] <= xr_max) and (y[i] >= yr_min and y[i] <= yr_max)):
	                x_block.append(x[i])
	                y_block.append(y[i])
	                z_block.append(z[i])
	        nf = len(x_block)  # calculate the number of points in the block

	    # calculate weight based on distance and p value
	    w_list = []
	    for j in range(len(x_block)):
	        d = distance(xz, yz, x_block[j], y_block[j])
	        if d > 0:
	            w = 1 / (d**p)
	            w_list.append(w)
	            z0 = 0
	        else:
	            w_list.append(0)  # if this condition is met, it means d <= 0, weight is set to 0

	    # check if there is 0 in the weight list
	    w_check = 0 in w_list
	    if w_check == True:
	        idx = w_list.index(0)  # find the index for weight = 0
	        z_idw = z_block[idx]  # set the value to the current sample value
	    else:
	        wt = np.transpose(w_list)
	        z_idw = np.dot(z_block, wt) / sum(w_list)  # idw calculation using dot product
	    return z_idw




References
------------


https://www.geodose.com/2019/09/3d-terrain-modelling-in-python.html#google_vignette

